package com.incapable.peacekeeper.datahandling;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.HashMap;
import java.util.Map;
import org.bukkit.Bukkit;

import com.incapable.peacekeeper.Main;
import com.incapable.peacekeeper.Player;

public class PersistantStorage {
	private Main main;

	public PersistantStorage(Main main) {
		this.main = main;
	}

	private Map<String, Player> PlayerMap = null;

	public Player getPlayer(String player) {
		if (PlayerMap == null) {
			loadPlayerMap();
		}
		if (!PlayerMap.containsKey(player)) {
			PlayerMap.put(player, new Player(player));
		}

		return (Player) PlayerMap.get(player);
	}

	public Map<String, Player> getAll() {
		if (PlayerMap == null) {
			loadPlayerMap();
		}
		return PlayerMap;
	}

	public void remove(String playerName) {
		if (PlayerMap == null) {
			loadPlayerMap();
		}
		if (PlayerMap.containsKey(playerName))
			PlayerMap.remove(playerName);
	}

	public void add(String playerName) {
		if (PlayerMap == null) {
			loadPlayerMap();
		}
		if (!PlayerMap.containsKey(playerName))
			PlayerMap.put(playerName, new Player(playerName));
	}

	@SuppressWarnings("unchecked")
	private void loadPlayerMap() {
		checkFile();
		try {
			FileInputStream fileInputStream = new FileInputStream(getFile());
			ObjectInputStream objInputStream = new ObjectInputStream(
					fileInputStream);
			PlayerMap = (HashMap<String, Player>) objInputStream.readObject();
			objInputStream.close();
			fileInputStream.close();
		} catch (IOException e) {
			Bukkit.broadcastMessage("D1 PeaceKeeper has encountered an error: "
					+ e.getMessage());
			Bukkit.broadcastMessage("This error may occur when enabling PeaceKeeper for the first time.");
		} catch (ClassNotFoundException e) {
			Bukkit.broadcastMessage("D2 PeaceKeeper has encountered an error: "
					+ e.getMessage());
		}

		if (PlayerMap == null)
			PlayerMap = new HashMap<String, Player>();
	}

	public void checkFile() {
		if (!getFile().exists())
			try {
				getFile().createNewFile();
			} catch (IOException e) {
				Bukkit.broadcastMessage("D3 PeaceKeeper has encountered an error: "
						+ e.getMessage());
			}
	}

	public void savePlayerMap(boolean resetValues) {
		if (resetValues) {
			for (Player Player : PlayerMap.values()) {
				resetPlayerData(Player);
			}
		}

		checkFile();
		try {
			FileOutputStream fos = new FileOutputStream(getFile());
			ObjectOutputStream oos = new ObjectOutputStream(fos);
			oos.writeObject(PlayerMap);
			oos.close();
			fos.close();
		} catch (IOException e) {
			Bukkit.broadcastMessage("D4 PeaceKeeper has encountered an error: "
					+ e.getMessage());
		}
		try {
			printPlayerData();
		} catch (IOException e) {
			Bukkit.broadcastMessage("D5 PeaceKeeper has encountered an error: "
					+ e.getMessage());
		}
	}

	private File getFile() {
		File dataFolder = main.getDataFolder();
		return new File(dataFolder.toString() + "/playerdata.dat");
	}

	public boolean doesContain(String player) {
		if (PlayerMap == null) {
			loadPlayerMap();
		}

		return PlayerMap.containsKey(player);
	}

	public void printPlayerData() throws IOException {
		File dataFolder = main.getDataFolder();
		File file = new File(dataFolder.toString() + "/playerDataPrintOut.txt");

		file.delete();

		File newFile = new File(dataFolder.toString()
				+ "/playerDataPrintOut.txt");

		FileWriter out = new FileWriter(newFile, true);

		BufferedWriter writer = new BufferedWriter(out);

		writer.write("---PeaceKeeper PlayerData Print Out---");
		writer.newLine();
		writer.write("NOTICE: This file is automatically generated. Changing the text in this file will have no effect on the actual data.");
		writer.newLine();
		writer.newLine();

		if (PlayerMap != null) {
			for (Player Player : PlayerMap.values()) {
				writer.write(Player.GetName());
				writer.newLine();
				writer.write("KickWarnings: " + Player.GetKickWarnings());
				writer.newLine();
				if (Player.IsBanned())
					writer.write("Banned: true");
				else
					writer.write("Banned: false");
				writer.newLine();
				writer.write("_____________________________________________________________________________________");
				writer.newLine();
			}
		}
		writer.close();
	}

	public void resetPlayerData(Player Player) {
		Player.ResetWarnings();
		Player.SetLastMessage("");
		Player.SetCanTalk(true);
		Player.ResetMessageCount();
		Player.ResetRepeats();

		Player.ResetKickWarnings();
		Player.ResetCoolDownWarnings();
		Player.ResetFloodWarnings();
		Player.SetCanUseCmd(true);
	}
}